// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product_with_info.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getProductWithInfo = `-- name: GetProductWithInfo :one
SELECT
    products.pk,
    products.price,
    products.id,
    products."imageURLs",
    products.status,
    products.quantity,
    products.created_at,
    products.updated_at,
    product_translations.category,
    product_translations.name,
    product_translations.description
FROM
    products
    INNER JOIN product_translations ON products.pk = product_translations.product_pk
WHERE
    products.pk = $1
    AND product_translations.language = $2
`

type GetProductWithInfoParams struct {
	Pk       int64
	Language LanguageCode
}

type GetProductWithInfoRow struct {
	Pk          int64
	Price       int32
	ID          pgtype.UUID
	ImageURLs   []string
	Status      ProductStatus
	Quantity    int32
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Category    string
	Name        string
	Description string
}

func (q *Queries) GetProductWithInfo(ctx context.Context, arg GetProductWithInfoParams) (GetProductWithInfoRow, error) {
	row := q.db.QueryRow(ctx, getProductWithInfo, arg.Pk, arg.Language)
	var i GetProductWithInfoRow
	err := row.Scan(
		&i.Pk,
		&i.Price,
		&i.ID,
		&i.ImageURLs,
		&i.Status,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const listProductWithInfo = `-- name: ListProductWithInfo :many
SELECT
    products.pk,
    products.price,
    products.id,
    products."imageURLs",
    products.status,
    products.quantity,
    products.created_at,
    products.updated_at,
    product_translations.category,
    product_translations.name,
    product_translations.description
FROM
    products
    INNER JOIN product_translations ON products.pk = product_translations.product_pk
WHERE
    product_translations.language = $1
LIMIT $2 offset $3
`

type ListProductWithInfoParams struct {
	Language LanguageCode
	Limit    int32
	Offset   int32
}

type ListProductWithInfoRow struct {
	Pk          int64
	Price       int32
	ID          pgtype.UUID
	ImageURLs   []string
	Status      ProductStatus
	Quantity    int32
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Category    string
	Name        string
	Description string
}

func (q *Queries) ListProductWithInfo(ctx context.Context, arg ListProductWithInfoParams) ([]ListProductWithInfoRow, error) {
	rows, err := q.db.Query(ctx, listProductWithInfo, arg.Language, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductWithInfoRow
	for rows.Next() {
		var i ListProductWithInfoRow
		if err := rows.Scan(
			&i.Pk,
			&i.Price,
			&i.ID,
			&i.ImageURLs,
			&i.Status,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Category,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
