// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order_details.sql

package db

import (
	"context"
)

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_details (order_pk, product_pk, quantity, price)
    VALUES ($1, $2, $3, $4)
RETURNING
    pk, order_pk, product_pk, quantity, price, discount, created_at, updated_at
`

type CreateOrderDetailParams struct {
	OrderPk   int64 `json:"order_pk"`
	ProductPk int64 `json:"product_pk"`
	Quantity  int32 `json:"quantity"`
	Price     int32 `json:"price"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRow(ctx, createOrderDetail,
		arg.OrderPk,
		arg.ProductPk,
		arg.Quantity,
		arg.Price,
	)
	var i OrderDetail
	err := row.Scan(
		&i.Pk,
		&i.OrderPk,
		&i.ProductPk,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderDetail = `-- name: DeleteOrderDetail :exec
DELETE FROM order_details
WHERE pk = $1
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, pk int64) error {
	_, err := q.db.Exec(ctx, deleteOrderDetail, pk)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT
    pk, order_pk, product_pk, quantity, price, discount, created_at, updated_at
FROM
    order_details
WHERE
    pk = $1
`

func (q *Queries) GetOrderDetail(ctx context.Context, pk int64) (OrderDetail, error) {
	row := q.db.QueryRow(ctx, getOrderDetail, pk)
	var i OrderDetail
	err := row.Scan(
		&i.Pk,
		&i.OrderPk,
		&i.ProductPk,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderDetailsByOrder = `-- name: GetOrderDetailsByOrder :many
SELECT
    pk, order_pk, product_pk, quantity, price, discount, created_at, updated_at
FROM
    order_details
WHERE
    order_pk = $1
`

func (q *Queries) GetOrderDetailsByOrder(ctx context.Context, orderPk int64) ([]OrderDetail, error) {
	rows, err := q.db.Query(ctx, getOrderDetailsByOrder, orderPk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.Pk,
			&i.OrderPk,
			&i.ProductPk,
			&i.Quantity,
			&i.Price,
			&i.Discount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetail = `-- name: UpdateOrderDetail :one
UPDATE
    order_details
SET
    order_pk = $2,
    product_pk = $3,
    quantity = $4,
    price = $5,
    discount = $6
WHERE
    pk = $1
RETURNING
    pk, order_pk, product_pk, quantity, price, discount, created_at, updated_at
`

type UpdateOrderDetailParams struct {
	Pk        int64 `json:"pk"`
	OrderPk   int64 `json:"order_pk"`
	ProductPk int64 `json:"product_pk"`
	Quantity  int32 `json:"quantity"`
	Price     int32 `json:"price"`
	Discount  int32 `json:"discount"`
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRow(ctx, updateOrderDetail,
		arg.Pk,
		arg.OrderPk,
		arg.ProductPk,
		arg.Quantity,
		arg.Price,
		arg.Discount,
	)
	var i OrderDetail
	err := row.Scan(
		&i.Pk,
		&i.OrderPk,
		&i.ProductPk,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
